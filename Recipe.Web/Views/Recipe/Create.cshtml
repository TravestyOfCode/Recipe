@model Recipe.Web.Application.Features.Recipe.CreateRecipeModel

@{
    ViewData["Title"] = "Create";

    var uoms = new SelectList(Model.UnitOfMeasures, "Key", "Value");

    Dictionary<int, string> categoryList = new Dictionary<int, string> { { 1, "Cat1" }, { 2, "Cat2" }, { 3, "Cat3" } };
    var cats = new SelectList(categoryList, "Key", "Value");

    var index = "ing-" + Guid.NewGuid();
    var catIndex = "cat-" + Guid.NewGuid();
}

<h1>Create</h1>

<h4>Recipe</h4>
<hr />
<div class="row">
    <div class="col-12">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <div class="col-6">
                    <label asp-for="Title" class="control-label fw-bold"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <label>Categories</label>
                <div id="category-list">
                    <div id="@catIndex">
                    <input type="text" name="Categories" class="" />                    
                    <button type="button" class="btn btn-danger btn-sm" onclick="DeleteCategory('@catIndex')">X</button>
                    </div>
                </div>
                <button type="button" class="btn btn-success" onclick="AddNewCategory()">+</button>
            </div>
            <div class="form-group">
                <div class="col-6">
                    <label asp-for="Description" class="control-label fw-bold"></label>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            </div>
            <hr />
            <div class="form-group">
                <div class="fw-bold">Ingredients</div>
                <div id="ingredients-list" class="">
                    <div class="form-group" id="@index">
                        <input type="hidden" name="ingredients.Index" value="@index" />
                        <label class="form-label">Qty.</label>
                        <input type="number" name="ingredients[@index].Quantity" class="" />
                        <label class="form-label">Product</label>
                        <input type="text" name="ingredients[@index].Product" class="" list="product-list" oninput="UpdateProductList(this)"/>
                        <label class="form-label">Units</label>
                        <select name="ingredients[@index].UnitOfMeasureId" asp-items="uoms" class="col">
                            <option value=""></option>
                        </select>
                        <button type="button" class="btn btn-danger col-auto" onclick="DeleteIngredient('@index')">Delete</button>
                    </div>
                </div>
                <button type="button" onclick="AddNewIngredient()" class="btn btn-primary">Add Ingredient</button>
            </div>
            <hr />
            <div class="form-group">
                <label asp-for="Instructions" class="control-label fw-bold"></label>
                <textarea asp-for="Instructions" class="form-control" rows="6"></textarea>
                <span asp-validation-for="Instructions" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>

    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<datalist id="product-list">
</datalist>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function AddNewIngredient() {
            const ingredientsList = document.getElementById("ingredients-list");

            fetch("AddIngredient", {
                method: "GET",
                mode: "cors",
                credentials: "same-origin"
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error("There was an error adding an new ingredient." + response.statusText);
                    }

                    return response.text();
                })
                .then((response) => {
                    ingredientsList.insertAdjacentHTML("beforeend", response);
                });
        }

        function AddNewCategory(){
            const categoryList = document.getElementById("category-list");

            const index = "cat-" + GetUniqueId();
            const category = document.createElement("div");
            category.setAttribute("id", index);

            const inputName = document.createElement("input");
            inputName.setAttribute("type", "text");
            inputName.setAttribute("name", "Categories");

            const buttonDelete = document.createElement("button");
            buttonDelete.setAttribute("type", "button");
            buttonDelete.setAttribute("class","btn btn-danger btn-sm");
            buttonDelete.setAttribute("onclick","DeleteCategory('"+index+"')");
            buttonDelete.innerText = "X";

            category.appendChild(inputName);
            category.appendChild(buttonDelete);
            
            categoryList.insertBefore(category, null);
        }


        function DeleteIngredient(id) {
            if (confirm("Are you sure you want to delete this ingredient?")) {
                document.getElementById(id).remove();
            }

        }

        function DeleteCategory(id){
            if(confirm("Are you sure you want to delete this cateogry?")){
                document.getElementById(id).remove();
            }
        }

        function GetUniqueId() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        }

        function UpdateProductList(e){
            fetch("../Product/GetProductsByName?page=1&perPage=10&sortBy=Name&sortOrder=ASC&name=" + e.value, {
                method: "GET",
                mode: "cors",
                credentials: "same-origin"
            })
            .then((response) => {
                if(!response.ok){
                    throw new Error("There was an error getting the products list." + response.statusText);
                }
                return response.json();
            })
            .then((ProductListModel) => {
                console.log(ProductListModel);
                let optionsList = "";
                ProductListModel.products.forEach(product => {
                    optionsList += "<option value='" + product.name + "' />";
                })

                document.getElementById("product-list").innerHTML = optionsList;
            })
        }
    </script>
}
